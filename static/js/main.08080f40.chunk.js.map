{"version":3,"sources":["containers/Login/index.tsx","containers/Home/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TOKEN_LS","API_URL","axios","interceptors","request","use","config","origin","URL","url","allowedOrigins","token","localStorage","getItem","includes","headers","authorization","error","Promise","reject","Login","storedJwt","useState","username","setUsername","password","setPassword","setJwt","getJwt","a","post","data","setItem","Form","onSubmit","Group","controlId","className","Label","Control","autoFocus","type","value","onChange","e","target","Button","size","disabled","length","Main","apiData","setApiData","useEffect","fetch","then","response","json","catch","toString","AppRoutes","useRoutes","path","element","Home","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAKMA,EAAW,QACXC,EAAU,6BAEhBC,IAAMC,aAAaC,QAAQC,KACzB,SAAAC,GACE,IAAQC,EAAW,IAAIC,IAAIF,EAAOG,KAAO,IAAjCF,OACFG,EAAiB,CAACT,GAClBU,EAAQC,aAAaC,QAAQb,GAInC,OAHIU,EAAeI,SAASP,IAAWD,EAAOS,UAC5CT,EAAOS,QAAQC,cAAf,UAAkCL,IAE7BL,KAET,SAAAW,GACE,OAAOC,QAAQC,OAAOF,MAI1B,IA+CeG,EA/CD,WACZ,IAAMC,EAAYT,aAAaC,QAAQb,GACvC,EAAgCsB,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAsBJ,mBAASD,GAAa,MAA5C,mBAAYM,GAAZ,WAEMC,EAAM,uCAAG,8BAAAC,EAAA,sEACU3B,IAAM4B,KAAN,UAAc7B,EAAd,UAA+B,CACpDsB,SAAUA,EACVE,SAAUA,GACT,CACDV,QAAS,CACP,eAAgB,sBANP,gBACLgB,EADK,EACLA,KASRnB,aAAaoB,QAAQhC,EAAU+B,EAAKpB,OACpCgB,EAAOI,EAAKpB,OAXC,2CAAH,qDAeZ,OACE,eAACsB,EAAA,EAAD,CAAMC,SAAUN,EAAhB,UACE,eAACK,EAAA,EAAKE,MAAN,CAAYC,UAAU,QAAQC,UAAU,YAAxC,UACE,cAACJ,EAAA,EAAKK,MAAN,uBACA,cAACL,EAAA,EAAKM,QAAN,CACEC,WAAS,EACTC,KAAK,WACLC,MAAOnB,EACPoB,SAAU,SAACC,GAAD,OAAOpB,EAAYoB,EAAEC,OAAOH,aAG1C,eAACT,EAAA,EAAKE,MAAN,CAAYC,UAAU,WAAtB,UACE,cAACH,EAAA,EAAKK,MAAN,uBACA,cAACL,EAAA,EAAKM,QAAN,CACEE,KAAK,WACLC,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAAOlB,EAAYkB,EAAEC,OAAOH,aAG1C,cAACI,EAAA,EAAD,CAAQC,KAAK,KAAKN,KAAK,SAASO,WAAYzB,EAAS0B,OAAS,GAAKxB,EAASwB,OAAS,GAArF,yBC9CSC,EAdF,WACX,MAA8B5B,mBAAiB,oBAA/C,mBAAO6B,EAAP,KAAgBC,EAAhB,KAQA,OAPAC,qBAAU,WACRC,MAAM,mCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAxB,GAAI,OAAIqB,EAAWrB,MACxB2B,OAAM,SAAAzC,GAAK,OAAImC,EAAWnC,EAAM0C,iBAClC,CAACR,IAGF,oBAAId,UAAU,0CAAd,SAAyDc,KCNvDS,EAAY,WAChB,OAAOC,YAAU,CACf,CAAEC,KAAM,IAAKC,QAAS,cAACC,EAAD,KACtB,CAAEF,KAAM,SAAUC,QAAS,cAAC,EAAD,QAUhBE,EANH,WACV,OAAO,cAAC,IAAD,UACL,cAAC,EAAD,OCFWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.08080f40.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Form } from 'react-bootstrap';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst TOKEN_LS = 'token';\r\nconst API_URL = 'https://146.59.45.158:8080';\r\n\r\naxios.interceptors.request.use(\r\n  config => {\r\n    const { origin } = new URL(config.url || '');\r\n    const allowedOrigins = [API_URL];\r\n    const token = localStorage.getItem(TOKEN_LS);\r\n    if (allowedOrigins.includes(origin) && config.headers) {\r\n      config.headers.authorization = `${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst Login = () => {\r\n  const storedJwt = localStorage.getItem(TOKEN_LS);\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [jwt, setJwt] = useState(storedJwt || null);\r\n\r\n  const getJwt = async () => {\r\n    const { data } = await axios.post(`${API_URL}/login`, {\r\n      username: username,\r\n      password: password,\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n\r\n    localStorage.setItem(TOKEN_LS, data.token);\r\n    setJwt(data.token);\r\n\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={getJwt}>\r\n      <Form.Group controlId=\"email\" className=\"mb-3 w-12\">\r\n        <Form.Label>Username</Form.Label>\r\n        <Form.Control\r\n          autoFocus\r\n          type=\"username\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"password\">\r\n        <Form.Label>Password</Form.Label>\r\n        <Form.Control\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n      </Form.Group>\r\n      <Button size=\"lg\" type=\"submit\" disabled={!(username.length > 0 && password.length > 0)}>\r\n        Sign-in\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Main = () => {\r\n  const [apiData, setApiData] = useState<string>('Czekam na serwer');\r\n  useEffect(() => {\r\n    fetch('https://146.59.45.158:8080/test')\r\n      .then(response => response.json())\r\n      .then(data => setApiData(data))\r\n      .catch(error => setApiData(error.toString()));\r\n  }, [apiData]);\r\n\r\n  return (\r\n    <h1 className=\"text-sm h-14 w-[300px] hover:text-white\">{apiData}</h1>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import {\r\n  BrowserRouter as Router,\r\n  useRoutes\r\n} from \"react-router-dom\";\r\nimport Login from './containers/Login';\r\nimport Home from './containers/Home';\r\n\r\nconst AppRoutes = () => {\r\n  return useRoutes([\r\n    { path: '/', element: <Home /> },\r\n    { path: '/login', element: <Login /> },\r\n  ]);\r\n}\r\n\r\nconst App = () => {\r\n  return <Router>\r\n    <AppRoutes />\r\n  </Router>\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './app_tailwind.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}