{"version":3,"sources":["hooks/useGlobalContext.tsx","containers/Login/index.tsx","containers/BoardList/BoardListElement/index.tsx","containers/BoardList/index.tsx","containers/Home/index.tsx","components/AddListForm/index.tsx","components/TextInput/index.tsx","components/DroppableList/index.tsx","components/Board/index.tsx","containers/WorkBoard/index.tsx","App.tsx","reportWebVitals.ts","containers/Navigation/index.tsx","index.tsx"],"names":["TOKEN_ALS_NAME","API_URL","GlobalContextEmpty","authState","setAuth","auth","getAuthState","GlobalContext","createContext","configureAxiosHeaders","axios","defaults","headers","post","token","get","put","ContextProvider","children","useState","setAuthState","useCallback","authDataString","localStorage","getItem","authData","JSON","parse","err","setItem","stringify","error","Promise","reject","useEffect","Provider","value","Login","useContext","status","setStatus","username","setUsername","password","setPassword","navigate","useNavigate","submitJWT","event","a","preventDefault","body","then","r","data","catch","e","Form","onSubmit","className","Group","controlId","Label","Control","autoFocus","type","onChange","target","Button","size","disabled","length","BoardsListElement","id","name","onClick","BoardsList","boards","show","setShow","setName","errMsg","setErrMsg","addNewBoardHandler","push","console","log","onCloseModal","map","idx","variant","Modal","onHide","Header","closeButton","Title","Body","placeholder","currentTarget","Footer","Main","setBoards","AddListForm","openButtonName","addButtonName","closeButtonName","submitFormCallback","buttonTextColor","clicked","setClicked","submitForm","setClickedCallback","state","TextInput","submitCallback","buttonClassName","inputClassName","listName","setListName","submitNameChange","onBlur","onKeyDown","key","DroppableList","items","toastNode","setToastNode","submited","setSubmited","selectedCard","setSelectedCard","description","setDescription","useSearchParams","searchParams","boardID","newName","message","setDescriptionCallback","submitChangeNameCallback","newCardName","droppableId","provided","droppableProps","ref","innerRef","item","index","draggableId","snapshot","draggableProps","dragHandleProps","openCardModal","backdrop","as","resolve","Toast","bg","onClose","Boolean","delay","autohide","Board","columns","setColumns","boardName","setBoardName","dataList","forEach","column","onDragEnd","result","destination","source","newColumns","sourceColumn","find","destColumn","destItems","splice","removed","params","URLSearchParams","window","history","replaceState","toString","position","color","height","width","WorkBoard","App","path","element","Home","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navigation","Navbar","expand","Container","Brand","href","Nav","Link","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3f58f5c.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useState, ReactNode, useCallback, useEffect } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\nconst TOKEN_ALS_NAME = 'auth';\r\nconst API_URL = 'https://146.59.45.158:8080';\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n}\r\ntype Auth = {\r\n  username: string;\r\n  token: string;\r\n}\r\ntype GlobalContextProps = {\r\n  authState: Auth | null;\r\n  setAuth: (auth: Auth | null) => void;\r\n  getAuthState: () => Auth | null;\r\n};\r\n\r\nconst GlobalContextEmpty: GlobalContextProps = {\r\n  authState: null,\r\n  setAuth: (auth: Auth | null) => null,\r\n  getAuthState: () => null,\r\n}\r\n\r\nconst GlobalContext = createContext(GlobalContextEmpty);\r\n\r\nconst configureAxiosHeaders = (auth: Auth) => {\r\n  axios.defaults.headers.post[\"Authorization\"] = auth.token;\r\n  axios.defaults.headers.post[\"Content-Type\"] = 'application/json';\r\n  //axios.defaults.headers.post[\"mode\"] = 'cors';\r\n\r\n  axios.defaults.headers.get[\"Authorization\"] = auth.token;\r\n  //axios.defaults.headers.get[\"mode\"] = 'no-cors';\r\n  axios.defaults.headers.get[\"Content-Type\"] = 'application/json';\r\n\r\n  axios.defaults.headers.put[\"Authorization\"] = auth.token;\r\n};\r\n\r\nconst ContextProvider = ({ children }: Props) => {\r\n  const [authState, setAuthState] = useState<Auth | null>(null);\r\n\r\n  // Get current auth state from AsyncStorage\r\n  const getAuthState = useCallback(() => {\r\n    try {\r\n      const authDataString = localStorage.getItem(TOKEN_ALS_NAME);\r\n      if (!authDataString)\r\n        throw \"No data in local storage\";\r\n      const authData = JSON.parse(authDataString) as Auth;\r\n      // Configure axios headers\r\n      configureAxiosHeaders(authData);\r\n      setAuthState(authData);\r\n\r\n      return authData;\r\n    } catch (err) {\r\n      setAuthState(null);\r\n    }\r\n    return null;\r\n  }, []);\r\n\r\n  // Update AsyncStorage & context state\r\n  const setAuth = useCallback((auth: Auth | null) => {\r\n    try {\r\n      localStorage.setItem(TOKEN_ALS_NAME, JSON.stringify(auth));\r\n      // Configure axios headers\r\n      if (auth)\r\n        configureAxiosHeaders(auth);\r\n      setAuthState(auth);\r\n    } catch (error) {\r\n      setAuthState(null);\r\n      Promise.reject(error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getAuthState();\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ authState, setAuth, getAuthState }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GlobalContext, ContextProvider, TOKEN_ALS_NAME, API_URL };\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Form } from 'react-bootstrap';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { API_URL, TOKEN_ALS_NAME, GlobalContext } from '../../hooks/useGlobalContext'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n  const { authState, setAuth } = useContext(GlobalContext);\r\n  const [status, setStatus] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  const submitJWT = async (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n\r\n    const body = {\r\n      username: username,\r\n      password: password,\r\n    };\r\n    await axios.post(`${API_URL}/public/login`, body)\r\n      .then(r => {\r\n        const { data } = r;\r\n        localStorage.setItem(TOKEN_ALS_NAME, JSON.stringify(data));\r\n        setAuth(data);\r\n        navigate('/tango');\r\n      })\r\n      .catch(e => {\r\n        setStatus('Username or password are invalid');\r\n        setAuth(null);\r\n      });\r\n  };\r\n\r\n  useEffect(() => { authState && navigate('/') }, []);\r\n\r\n  return (\r\n    <Form onSubmit={submitJWT} className=\"bg-trello h-[100vh] w-[100%] flex justify-center flex-col\">\r\n      <div className=\"w-80 mx-auto my-0 flex flex-col align-middle\">\r\n        <Form.Group controlId=\"username\" className=\"p-2 text-white\">\r\n          <Form.Label>Username</Form.Label>\r\n          <Form.Control\r\n            autoFocus\r\n            type=\"username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"password\" className=\"p-2 text-white\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n        <Button className=\"m-4\" size=\"lg\" type=\"submit\" disabled={!(username.length > 0 && password.length > 0)}>\r\n          Sign-in\r\n        </Button>\r\n        <p className=\"text-center text-white bg-[#ff000066] rounded-lg\">{status}</p>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Loader from 'react-loader-spinner';\r\nimport { BoardType } from '..';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst BoardsListElement = ({ id, name }: BoardType) => {\r\n    const navigate = useNavigate();\r\n    const buttonElementHandler = (e: React.SyntheticEvent) => {\r\n        navigate(`/tango/board?id=${id}&name=${name}`);\r\n    };\r\n    return (\r\n        <Button onClick={buttonElementHandler} className=\"h-[80px] bg-[#97a0af]\">\r\n            {name}\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport default BoardsListElement;","\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { API_URL, TOKEN_ALS_NAME, GlobalContext } from '../../hooks/useGlobalContext'\r\nimport Loader from 'react-loader-spinner';\r\nimport BoardsListElement from './BoardListElement';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Form, Modal } from 'react-bootstrap';\r\ntype BoardsListProps = {\r\n  boards: BoardType[];\r\n};\r\n\r\ntype BoardType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\nconst BoardsList = ({ boards }: BoardsListProps) => {\r\n  const [show, setShow] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const [errMsg, setErrMsg] = useState('');\r\n\r\n  const addNewBoardHandler = useCallback((e: React.SyntheticEvent) => new Promise(async () => {\r\n    e.preventDefault();\r\n    await axios.post(`${API_URL}/board`, { name: name })\r\n      .then(r => {\r\n        const { data } = r;\r\n        boards.push(data as BoardType);\r\n        setShow(false);\r\n      })\r\n      .catch(e => { setErrMsg(\"error\"); console.log(e); });\r\n    setName('');\r\n  }), [name]);\r\n\r\n  const onCloseModal = () => {\r\n    setName('');\r\n    setErrMsg('');\r\n    setShow(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"max-w-screen-xl mx-auto \">\r\n      <div className=\"p-8 md:p-4 max-w-screen-md mx-auto text-white\"><h3>Boards</h3></div>\r\n      <div className=\"px-8 md:px-4 max-w-screen-md mx-auto grid grid-flow-row gap-3 sm:grid-cols-2 md:grid-cols-4\">\r\n        {boards.map((e, idx) => <BoardsListElement key={idx} id={e.id} name={e.name} />)}\r\n        <Button className=\"h-[80px]\" variant=\"light\" onClick={() => setShow(true)}>Create new board</Button>\r\n      </div>\r\n      <Modal show={show} onHide={onCloseModal} size=\"sm\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create new board</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={addNewBoardHandler}>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Control type=\"text\" placeholder=\"Add board title\" onChange={(e) => setName(e.currentTarget.value)} />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Create board\r\n            </Button>\r\n          </Form>\r\n          {errMsg && <p className=\"text-red-500 pt-2 m-0\">{errMsg}</p>}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={onCloseModal}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BoardsList;\r\nexport type { BoardType };","\r\nimport React, { useEffect, useState } from 'react';\r\nimport Board from '../../components/Board';\r\nimport axios from 'axios';\r\nimport { API_URL, TOKEN_ALS_NAME, GlobalContext } from '../../hooks/useGlobalContext'\r\nimport Loader from 'react-loader-spinner';\r\nimport BoardsList, { BoardType } from '../BoardList';\r\n\r\n\r\nconst Main = () => {\r\n  const [boards, setBoards] = useState<BoardType[] | null>(null);\r\n\r\n  useEffect(() => {\r\n    axios.get(`${API_URL}/board/all`)\r\n      .then(r => {\r\n        const { data } = r;\r\n        setBoards(data);\r\n      })\r\n      .catch(e => console.log(e));\r\n  }, []);\r\n\r\n  console.log(boards);\r\n\r\n  return (\r\n    <main className=\"bg-trello h-[100vh] w-[fit-content] min-w-full\">\r\n      {boards === null ? <Loader type=\"Puff\" /> : <BoardsList boards={boards} />}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React, { ReactNode, useCallback, useState } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\ntype AddListButtonProps = {\r\n  openButtonName: string;\r\n  addButtonName: string;\r\n  closeButtonName: string;\r\n  placeholder: string;\r\n  submitFormCallback: (name: string) => Promise<string>;\r\n  className?: string;\r\n  buttonTextColor?: string;\r\n};\r\n\r\nconst AddListForm = ({ openButtonName, addButtonName, closeButtonName, placeholder, submitFormCallback, className, buttonTextColor }: AddListButtonProps) => {\r\n  const [name, setName] = useState('');\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const submitForm = async (event: React.SyntheticEvent) => {\r\n    event.preventDefault();\r\n    await submitFormCallback(name)\r\n      .then(r => {\r\n        setName('');\r\n        setClicked(false);\r\n      })\r\n      .catch(e => { });\r\n  };\r\n\r\n  const setClickedCallback = (state: boolean) => {\r\n    setClicked(state);\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={submitForm} className={className}>\r\n      {!clicked ?\r\n        (\r\n          <button\r\n            className={`!bg-[#ffffff3a] hover:!bg-[#0000009a] btn w-[100%] text-gray-200 ${buttonTextColor}`}\r\n            onClick={() => setClickedCallback(true)}\r\n          >\r\n            {openButtonName}\r\n          </button>\r\n        )\r\n        :\r\n        (\r\n          <div className=\"bg-[#ebecf0] p-1\">\r\n            <Form.Group controlId=\"name\" className=\"m-2\">\r\n              <Form.Control\r\n                autoFocus\r\n                type=\"name\"\r\n                value={name}\r\n                placeholder={placeholder}\r\n                onChange={e => setName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button className=\"m-2\" size=\"sm\" type=\"submit\" disabled={name.length === 0}>\r\n              {addButtonName}\r\n            </Button>\r\n            <Button className=\"m-2\" size=\"sm\" variant=\"danger\" onClick={() => setClickedCallback(false)}>\r\n              {closeButtonName}\r\n            </Button>\r\n          </div>\r\n        )\r\n      }\r\n    </Form >\r\n  )\r\n};\r\n\r\nexport default AddListForm;\r\n","\r\nimport React, { useCallback, useState } from 'react';\r\n\r\ntype TextInputProps = {\r\n  name: string;\r\n  submitCallback: (name: string) => void;\r\n  className?: string;\r\n  buttonClassName?: string;\r\n  inputClassName?: string;\r\n}\r\n\r\nconst TextInput = ({ name, submitCallback, className, buttonClassName, inputClassName }: TextInputProps) => {\r\n  const [listName, setListName] = useState(name);\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const submitNameChange = useCallback(async () => {\r\n    submitCallback(listName);\r\n    setClicked(false);\r\n    setListName('');\r\n  }, [listName]);\r\n\r\n  return (\r\n    <div className={`w-[100%] p-2 ${className}`}>\r\n      {!clicked ?\r\n        <button className={`w-[100%] font-bold ${buttonClassName}`} onClick={() => setClicked(true)}>\r\n          {listName}\r\n        </button>\r\n        :\r\n        <input className={`w-[100%]  ${inputClassName}`}\r\n          onChange={e => setListName(e.target.value)}\r\n          onSubmit={submitNameChange}\r\n          onBlur={submitNameChange}\r\n          onKeyDown={e => e.key === 'Enter' && submitNameChange()}\r\n          type=\"text\"\r\n          autoFocus\r\n          value={listName}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextInput;\r\n","import axios from 'axios';\r\nimport React, { ReactNode, useCallback, useState } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { Form, Modal, Toast } from 'react-bootstrap';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { API_URL } from '../../hooks/useGlobalContext';\r\nimport AddListForm from '../AddListForm';\r\n\r\nimport { BackendBoardColumns, CardContent } from '../Board'\r\nimport TextInput from '../TextInput';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\ntype ToastMsg = {\r\n  variant: string;\r\n  message: string;\r\n}\r\n\r\nconst DroppableList = ({ id, name, items }: BackendBoardColumns) => {\r\n  const [toastNode, setToastNode] = useState<ToastMsg | null>(null);\r\n  const [submited, setSubmited] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const [errMsg, setErrMsg] = useState('');\r\n\r\n  const [selectedCard, setSelectedCard] = useState<CardContent | null>(null);\r\n  const [description, setDescription] = useState<string>();\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [boardID, setBoardID] = useState<string | null>(searchParams.get('id'));\r\n\r\n  const submitNameChange = async (newName: string) => {\r\n    await axios.post(`${API_URL}/board/${id}/list`, { name: newName })\r\n      .then(r => {\r\n        console.log(r.data)\r\n      })\r\n      .catch(e => {\r\n        setToastNode({\r\n          variant: 'danger',\r\n          message: `Cannot change the name`\r\n        });\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const submitFormCallback = (name: string): Promise<string> => {\r\n    if (submited)\r\n      throw \"Another form is submiting\";\r\n    setSubmited(true);\r\n    return new Promise((resolve, reject) => {\r\n      setToastNode({\r\n        variant: 'info',\r\n        message: `loading`\r\n      });\r\n      return axios.post(`${API_URL}/board/${boardID}/list/${id}/card`, { name: name, description: '' })\r\n        .then(r => {\r\n          items ? items.push(r.data) : items = r.data;\r\n        })\r\n        .catch(e => {\r\n          setToastNode({\r\n            variant: 'danger',\r\n            message: `Cannot add item`\r\n          });\r\n        });\r\n    });\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setShow(false);\r\n  };\r\n\r\n  const openCardModal = (item: CardContent) => {\r\n    setSelectedCard(item);\r\n    setDescription(item.description);\r\n    setShow(true);\r\n  };\r\n\r\n  const setDescriptionCallback = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    await axios.put(`${API_URL}/board/${boardID}/list/${id}/card/${selectedCard?.id}`,\r\n      {\r\n        description: description,\r\n        name: selectedCard?.name,\r\n      }\r\n    )\r\n      .then(() => {\r\n        if (selectedCard)\r\n          selectedCard.description = description as string;\r\n      })\r\n      .catch(e => {\r\n        setToastNode({\r\n          variant: 'danger',\r\n          message: `Cannot set description`\r\n        });\r\n        console.log(e);\r\n        setShow(false);\r\n      });\r\n  };\r\n\r\n  const submitChangeNameCallback = async (newCardName: string) => {\r\n    await axios.put(`${API_URL}/board/${boardID}/list/${id}/card/${selectedCard?.id}`,\r\n      {\r\n        description: selectedCard?.description,\r\n        name: newCardName,\r\n      }\r\n    )\r\n      .then(() => {\r\n        if (selectedCard)\r\n          selectedCard.name = newCardName;\r\n      })\r\n      .catch(e => {\r\n        setToastNode({\r\n          variant: 'danger',\r\n          message: `Cannot set description`\r\n        });\r\n        console.log(e);\r\n        setShow(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-[272px] bg-[#ebecf0] m-2 h-[fit-content]\">\r\n      <TextInput name={name} submitCallback={submitNameChange} />\r\n\r\n      <Droppable droppableId={`${id}`} key={`${id}${name}`}>\r\n        {provided =>\r\n          <div\r\n            className=\"w-[272px] min-h-[30px]\"\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            {items?.map((item, index) =>\r\n              <Draggable\r\n                key={item.id}\r\n                draggableId={`${item.id}`}\r\n                index={index}\r\n              >\r\n                {(provided, snapshot) =>\r\n                  <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    onClick={() => openCardModal(item)}\r\n                    className=\"bg-white rounded-sm m-2 p-3\"\r\n                  >\r\n                    {item.name}\r\n                  </div>\r\n                }\r\n              </Draggable>\r\n            )}\r\n            {provided.placeholder}\r\n          </div>\r\n        }\r\n      </Droppable>\r\n\r\n      <Modal show={show} onHide={onCloseModal} size=\"lg\" backdrop=\"static\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title><TextInput name={selectedCard?.name as string} submitCallback={submitChangeNameCallback} /> </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={setDescriptionCallback}>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Control\r\n                value={description}\r\n                as=\"textarea\" placeholder=\"Add card description\"\r\n                onChange={(e) => setDescription(e.currentTarget.value)}\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Save\r\n            </Button>\r\n          </Form>\r\n          {errMsg && <p className=\"text-red-500 pt-2 m-0\">{errMsg}</p>}\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={onCloseModal}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <AddListForm\r\n        openButtonName=\"+ Add another card\"\r\n        addButtonName=\"Add card\"\r\n        closeButtonName=\"Close\"\r\n        placeholder=\"Enter card title...\"\r\n        submitFormCallback={submitFormCallback}\r\n        className=\"m-2\"\r\n      />\r\n\r\n      <Toast className=\"absolute !w-[272px] my-2\" bg={toastNode?.variant} onClose={() => setToastNode(null)} show={Boolean(toastNode)} delay={2000} autohide>\r\n        <Toast.Header>\r\n          <strong className=\"me-auto\">Status</strong>\r\n          <small>now</small>\r\n        </Toast.Header>\r\n        <Toast.Body>{toastNode?.message}</Toast.Body>\r\n      </Toast>\r\n    </div >\r\n  )\r\n};\r\n\r\nexport default DroppableList;\r\n","import React, { ReactNode, useCallback, useContext, useEffect, useState } from 'react';\r\nimport AddListForm from '../AddListForm';\r\nimport DroppableList from '../DroppableList';\r\nimport Loader from \"react-loader-spinner\";\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport axios from 'axios';\r\nimport { API_URL, GlobalContext } from \"../../hooks/useGlobalContext\";\r\nimport { Toast } from 'react-bootstrap';\r\nimport TextInput from '../TextInput';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\n\r\ntype BoardProps = {\r\n\r\n};\r\ntype CardContent = {\r\n  id: number;\r\n  name: string;\r\n  listId: string;\r\n  position: number;\r\n  description: string;\r\n}\r\n\r\ntype BackendBoardColumns = {\r\n  id: number;\r\n  name: string;\r\n  position: number;\r\n  items?: CardContent[];\r\n};\r\n\r\ntype ToastMsg = {\r\n  variant: string;\r\n  message: string;\r\n}\r\n\r\nconst Board = ({ }: BoardProps) => {\r\n  const navigate = useNavigate();\r\n  const [columns, setColumns] = useState<BackendBoardColumns[]>([]);\r\n  const [toastNode, setToastNode] = useState<ToastMsg | null>(null);\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [boardID, setBoardID] = useState<string | null>(searchParams.get('id'));\r\n  const [boardName, setBoardName] = useState<string | null>(searchParams.get('name'));\r\n\r\n\r\n  useEffect(() => {\r\n    (!boardID && !boardName) && navigate('/tango');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const dataList = async () => {\r\n      await axios.get(`${API_URL}/board/${boardID}/list`)\r\n        .then(r => {\r\n          const { data } = r;\r\n          setColumns(data);\r\n          setToastNode({\r\n            variant: 'success',\r\n            message: `Board loaded`\r\n          });\r\n        })\r\n        .catch(e => {\r\n          setToastNode({\r\n            variant: 'danger',\r\n            message: `${e}`\r\n          });\r\n        })\r\n    };\r\n    dataList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const dataCard = () => {\r\n      columns.forEach(async column => {\r\n        await axios.get(`${API_URL}/board/${boardID}/list/${column.id}/card`)\r\n          .then(r => {\r\n            column.items = r.data;\r\n            console.log(r.data)\r\n          })\r\n          .catch(e => {\r\n            setToastNode({\r\n              variant: 'danger',\r\n              message: `${e}`\r\n            });\r\n          });\r\n      });\r\n    };\r\n    dataCard();\r\n  }, [columns]);\r\n\r\n  const submitFormCallback = useCallback((name: string): Promise<string> =>\r\n    new Promise(async () => {\r\n      const body = { name: name }\r\n      await axios.post(`${API_URL}/board/${boardID}/list`, body)\r\n        .then(r => {\r\n          const { data } = r;\r\n          setColumns([...columns, data]);\r\n          setToastNode({\r\n            variant: 'success',\r\n            message: `Added new a list: ${name}`\r\n          });\r\n        })\r\n        .catch(e => {\r\n          setToastNode({\r\n            variant: 'danger',\r\n            message: `${e}`\r\n          });\r\n        })\r\n    }), [columns]);\r\n\r\n  const onDragEnd = useCallback((result) => {\r\n    if (!result.destination) return;\r\n    const { source, destination } = result;\r\n    const newColumns = [...columns];\r\n    if (source.droppableId !== destination.droppableId) {\r\n      const sourceColumn = newColumns.find((e: BackendBoardColumns) => e.id === source.droppableId);\r\n      const destColumn = newColumns.find((e: BackendBoardColumns) => e.id === destination.droppableId);\r\n      const destItems = destColumn?.items;\r\n      //@ts-ignore\r\n      const [removed] = sourceColumn.items.splice(source.index, 1);\r\n      destItems?.splice(destination.index, 0, removed);\r\n    } else {\r\n      const column = newColumns.find((e: BackendBoardColumns) => e.id === source.droppableId);\r\n      column && column.items && ([column.items[source.index], column.items[destination.index]] = [column.items[destination.index], column.items[source.index]]);\r\n    }\r\n    setColumns(newColumns);\r\n  }, [columns]);\r\n\r\n  const submitNameChange = useCallback(async (newName: string) => {\r\n    await axios.put(`${API_URL}/board`, { name: newName }, { params: { id: `${boardID}` } })\r\n      .then(() => {\r\n        const params = new URLSearchParams(`id=${boardID}&name=${newName}`);\r\n        window.history.replaceState(null, '', `board?${params.toString()}`);\r\n        setBoardName(newName);\r\n      })\r\n      .catch(e => {\r\n        setToastNode({\r\n          variant: 'danger',\r\n          message: `Cannot change the name`\r\n        });\r\n        console.log(e);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <TextInput name={boardName as string} submitCallback={submitNameChange} className=\"w-[fit-content]\" buttonClassName=\"text-xl text-white\" />\r\n      <div className=\"flex\">\r\n        {columns.length > 0 ?\r\n          <DragDropContext onDragEnd={result => onDragEnd(result)}>\r\n            {columns.map((column, index) =>\r\n              <DroppableList key={index} id={column.id} name={column.name} position={column.position} items={column.items} />\r\n            )}\r\n          </DragDropContext>\r\n          :\r\n          <Loader\r\n            type=\"Puff\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n          />\r\n        }\r\n        <div>\r\n          <AddListForm\r\n            openButtonName=\"+ Add a list\"\r\n            addButtonName=\"Add list\"\r\n            closeButtonName=\"Close\"\r\n            placeholder=\"Enter list title...\"\r\n            submitFormCallback={submitFormCallback}\r\n            className=\"w-[272px] m-2\"\r\n            buttonTextColor=\"text-white\"\r\n          />\r\n          <Toast className=\"!w-[272px] m-2\" bg={toastNode?.variant} onClose={() => setToastNode(null)} show={Boolean(toastNode)} delay={2000} autohide>\r\n            <Toast.Header>\r\n              <strong className=\"me-auto\">Status</strong>\r\n              <small>now</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{toastNode?.message}</Toast.Body>\r\n          </Toast>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Board;\r\nexport type { BackendBoardColumns, CardContent };\r\n","\r\nimport React, { useEffect } from 'react';\r\nimport Board from '../../components/Board';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\n\r\nconst WorkBoard = () => {\r\n\r\n  return (\r\n    <main className=\"bg-trello h-[100vh] w-[fit-content] min-w-full\">\r\n      <Board />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default WorkBoard;\r\n","import {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Routes\r\n} from \"react-router-dom\";\r\nimport Login from './containers/Login';\r\nimport Home from './containers/Home';\r\nimport WorkBoard from './containers/WorkBoard';\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"./hooks/useGlobalContext\";\r\n\r\nconst App = () => {\r\n  const { authState } = useContext(GlobalContext);\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        {authState ? (\r\n          <>\r\n            <Route path='/tango' element={<Home />} />\r\n            <Route path='/tango/login' element={<Login />} />\r\n            <Route path='/tango/board' element={<WorkBoard />} />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Route path='/tango' element={<Login />} />\r\n            <Route path='/tango/login' element={<Login />} />\r\n          </>\r\n        )}\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useContext } from 'react';\r\nimport { Container, Nav, Navbar, } from 'react-bootstrap';\r\nimport { GlobalContext } from '../../hooks/useGlobalContext';\r\n\r\n\r\nconst Navigation = () => {\r\n  const { authState, setAuth } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\" className=\"overflow-hidden !fixed w-[100%]\">\r\n      <Container>\r\n        <Navbar.Brand href=\"/tango\">Tango</Navbar.Brand>\r\n        {authState ?\r\n          <Nav.Link href=\"/tango/login\" onClick={() => setAuth(null)}>Logout</Nav.Link>\r\n          :\r\n          <Nav.Link href=\"/tango\">Login</Nav.Link>\r\n        }\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './app_tailwind.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { ContextProvider } from './hooks/useGlobalContext';\nimport Navigation from './containers/Navigation';\n\nReactDOM.render(\n  <ContextProvider>\n    <React.StrictMode>\n      <Navigation />\n      <div className=\"pt-[56px]\">\n        <App />\n      </div>\n    </React.StrictMode>\n  </ContextProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}